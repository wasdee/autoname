name: Test with Pytest

on: [push]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        cache: 'pip'
    #----------------------------------------------
    #          install and run linters
    #----------------------------------------------
    - run: python -m pip install ruff black mypy
    - run: |
        ruff check . 
        black . --check
        mypy .

  test:
    needs: linting
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [ "3.7", "3.8", "3.9", "3.10", "3.11", "3.12-dev", "pypy-3.x" ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'

    - name: Set up Python with Poetry
      uses: snok/install-poetry@v1
      with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
      # Install the project itself
    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/ 
        coverage report
